# /release VERSION=X.Y.Z

**USAGE**: Copy this file to `.claude/commands/release.md` in YOUR project.

Automated release workflow for YOUR project. Bumps version, updates changelog, creates git tags, and prepares releases.

---

## OBJECTIVE

Streamline YOUR project's release process:
- ‚úÖ Bump version in package.json (or equivalent)
- ‚úÖ Generate/update CHANGELOG.md
- ‚úÖ Create git tag
- ‚úÖ Run tests and build
- ‚úÖ Push to remote with tag

---

## PARAMETERS

**VERSION** (required):
- Semantic version: MAJOR.MINOR.PATCH
- Examples: `1.2.3`, `2.0.0`, `1.5.1`

**Examples**:
```bash
/release VERSION=1.2.3
/release VERSION=2.0.0
```

---

## RELEASE WORKFLOW

### Step 1: Pre-Release Validation

**Check current state**:
```bash
# Ensure working directory is clean
git status

# Check current version
cat package.json | grep version

# Run tests
npm test  # or your test command
```

**If validation fails**:
```
‚ùå Cannot proceed - uncommitted changes
   Please commit or stash changes first

‚ùå Cannot proceed - tests failing
   Fix tests before releasing
```

### Step 2: Update Version Files

**Update package.json** (or your version file):
```json
{
  "version": "X.Y.Z"  // Update this
}
```

**For other package managers**:
- **Python**: `pyproject.toml` or `setup.py`
- **Rust**: `Cargo.toml`
- **Go**: Git tags only (no version file)
- **Maven**: `pom.xml`

### Step 3: Update CHANGELOG.md

**Generate changelog entry**:
```bash
# Option 1: Use git log
git log $(git describe --tags --abbrev=0)..HEAD --oneline

# Option 2: Use conventional-changelog
npx conventional-changelog -p angular -i CHANGELOG.md -s

# Option 3: Manual entry (show template)
```

**Changelog template**:
```markdown
## [X.Y.Z] - YYYY-MM-DD

### Added
- New feature 1
- New feature 2

### Changed
- Updated behavior of X

### Fixed
- Fixed bug in Y

### Security
- Security patch for Z
```

### Step 4: Run Build and Tests

**Build your project**:
```bash
# Node.js
npm run build && npm test

# Python
python -m build && pytest

# Rust
cargo build --release && cargo test

# Go
go build ./... && go test ./...
```

**If build/tests fail**:
```
‚ùå Build failed - fix errors before releasing
‚ùå Tests failed - fix failing tests before releasing
```

### Step 5: Create Git Tag

**Commit version changes**:
```bash
git add package.json CHANGELOG.md
git commit -m "chore: release v${VERSION}

Release v${VERSION}

See CHANGELOG.md for full details."
```

**Create annotated tag**:
```bash
git tag -a "v${VERSION}" -m "Release v${VERSION}

$(git log $(git describe --tags --abbrev=0)..HEAD --oneline)
"
```

### Step 6: Push to Remote

**Push commits and tags**:
```bash
# Push commits
git push origin main

# Push tags
git push origin "v${VERSION}"

# Or push both at once
git push origin main --tags
```

**Confirmation**:
```
‚úÖ Released v${VERSION}
   - Committed: ‚úÖ
   - Tagged: v${VERSION} ‚úÖ
   - Pushed: ‚úÖ

Next steps:
  - Create GitHub release (if using GitHub)
  - Publish to npm/PyPI/crates.io (if applicable)
  - Notify team/users
```

---

## SEMANTIC VERSIONING GUIDE

**MAJOR (X.0.0)** - Breaking changes:
- Removed features or APIs
- Changed behavior incompatibly
- Major refactoring
- Example: 1.5.3 ‚Üí 2.0.0

**MINOR (0.X.0)** - New features (backwards compatible):
- Added new features
- Deprecated features (not removed)
- New APIs
- Example: 1.5.3 ‚Üí 1.6.0

**PATCH (0.0.X)** - Bug fixes:
- Fixed bugs
- Security patches
- Documentation updates
- Example: 1.5.3 ‚Üí 1.5.4

---

## PROJECT-SPECIFIC CUSTOMIZATIONS

**Customize this section for your project**:

```bash
# Example: Node.js project with npm publish
npm run build
npm test
npm version ${VERSION}
npm publish
git push origin main --tags

# Example: Python project with PyPI
python -m build
twine check dist/*
twine upload dist/*
git push origin main --tags

# Example: Rust project with crates.io
cargo build --release
cargo test
cargo publish
git push origin main --tags

# Example: Docker image build
docker build -t myapp:${VERSION} .
docker tag myapp:${VERSION} myapp:latest
docker push myapp:${VERSION}
docker push myapp:latest
```

---

## ERROR HANDLING

**Issue: Working directory not clean**
```
‚ùå Uncommitted changes detected

ACTION: Commit or stash changes first
  git add .
  git commit -m "..."

Then re-run: /release VERSION=X.Y.Z
```

**Issue: Tests failing**
```
‚ùå 3 tests failing

ACTION: Fix tests before releasing
  npm test  # see which tests fail
  # Fix the tests
  # Re-run /release
```

**Issue: Version already exists**
```
‚ùå Tag v1.2.3 already exists

ACTION: Choose a different version or delete old tag
  git tag -d v1.2.3  # delete local
  git push origin :refs/tags/v1.2.3  # delete remote
```

**Issue: Push fails (no remote)**
```
‚ùå Git push failed - no remote configured

ACTION: Add remote first
  git remote add origin https://github.com/user/repo.git
  git push -u origin main
```

---

## WHEN TO USE

**Run this command when**:
- ‚úÖ Ready to release new version
- ‚úÖ All tests passing
- ‚úÖ All changes committed
- ‚úÖ Ready to create git tag
- ‚úÖ Want automated version management

**Don't use when**:
- ‚ùå Tests are failing
- ‚ùå Uncommitted changes exist
- ‚ùå Not ready for public release

---

## EXAMPLE SESSION

```bash
User: /release VERSION=1.2.3

Claude:
üîç Pre-Release Checks
‚úÖ Working directory clean
‚úÖ Tests passing (42 tests)
‚úÖ Build successful

üì¶ Version Update
  Current: 1.2.2
  New: 1.2.3

üìù CHANGELOG.md
  Added [1.2.3] section with 3 changes

üè∑Ô∏è  Git Tag
  Created: v1.2.3
  Pushed to origin

‚úÖ Release v1.2.3 complete!

Next steps:
  - Create GitHub release
  - Publish to npm (if applicable)
```

---

**Automate your release workflow!**
